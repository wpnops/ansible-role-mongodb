---
- name: Reconfigure MongoDB replica set
  community.mongodb.mongodb_replicaset:
    replica_set: "{{ mongodb_replicaset_name }}"
    members: "{{ _members_update }}"
    reconfigure: true
    validate: false
  become: false
  delegate_to: "{{ replicaset_primary }}"

- name: Add new members to MongoDB replicaset
  when: _add_member | default(false) | bool
  delegate_to: "{{ replicaset_primary }}"
  become: false
  block:
    - name: Wait for replica set to stabilize
      community.mongodb.mongodb_status:
        replica_set: "{{ mongodb_replicaset_name }}"
        validate: minimal
        poll: "{{ mongodb_reconfig_poll }}"
        interval: "{{ mongodb_reconfig_interval }}"

    - name: Reconfigure MongoDB replica set
      community.mongodb.mongodb_replicaset:
        replica_set: "{{ mongodb_replicaset_name }}"
        members: "{{ _existing + [_update_member] }}"
        reconfigure: true
        validate: false
      vars:
        _update_member:
          host: "{{ _mongodb_member }}"
          hidden: false
          votes: 1
          priority: 1

    - name: Wait for replica set to stabilize
      community.mongodb.mongodb_status:
        replica_set: "{{ mongodb_replicaset_name }}"
        validate: minimal
        poll: "{{ mongodb_reconfig_poll }}"
        interval: "{{ mongodb_reconfig_interval }}"

- name: Query existing MongoDB replica set members
  community.mongodb.mongodb_shell:
    eval: "rs.status().members"
  become: false
  retries: 6
  delay: 10
  register: mongodb_status
  until: mongodb_status is success
  delegate_to: "{{ replicaset_primary }}"
  changed_when: false

- name: Record existing MongoDB replica set members
  ansible.builtin.set_fact:
    _existing_members: "{{ _members_list | map(attribute='name') }}"
  vars:
    _members_list: "{{ mongodb_status.transformed_output | list }}"
