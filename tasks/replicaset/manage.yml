---
- name: Manage replicaset
  run_once: true
  block:

    - name: Initialize cluster defaults
      ansible.builtin.set_fact:
        _existing_members: []
      when: _existing_members is not defined

    - name: Debug target members
      ansible.builtin.debug:
        msg: "Target members are [{{ mongodb_replicaset_members | join(',') }}]"

    - name: Debug cluster facts
      ansible.builtin.debug:
        msg: "Detected cluster members [{{ _existing_members | join(',') }}]"

    - name: Initialize hostvar facts
      ansible.builtin.set_fact:
        _addr_attrs: "{{ __addr_attrs }}"
        _addr_vars: "{{ _iface_vars | selectattr(__addr_attrs[0], 'defined') | map('nephelaiio.plugins.map_flatten') }}"
      vars:
        __addr_attrs: ['ansible_default_ipv4', 'address']
        __inventory_attrs: "{{ [__addr_attrs[0], 'inventory_hostname'] }}"
        _iface_vars: "{{ hostvars.values() | map('nephelaiio.plugins.select_attributes', __inventory_attrs) }}"

    - name: Build address fact dictionary
      ansible.builtin.set_fact:
        _revvars: "{{ _addr_vars | nephelaiio.plugins.list_to_dict(_addr_dotattr) }}"
      vars:
        _addr_dotattr: "{{ '.'.join(_addr_attrs) }}"

    - name: Detect new cluster members
      ansible.builtin.set_fact:
        _mongodb_add_members: "{{ _add_members }}"
      vars:
        _existing_hosts: "{{ _existing_members | map('nephelaiio.plugins.split_with', ':') | map('first') }}"
        _existing_inventory: "{{ _existing_hosts | select('in', hostvars) }}"
        _existing_addrs: "{{ _existing_inventory | map('extract', hostvars, _addr_attrs) }}"
        _existing_iphosts: "{{ _existing_addrs | map('nephelaiio.plugins.map_format', '%s:' + mongodb_port) }}"
        _existing_hostaddrs: "{{ _existing_members + _existing_iphosts }}"
        _add_members: "{{ mongodb_replicaset_members | reject('in', _existing_hostaddrs) }}"

    - name: Debug new cluster members
      ansible.builtin.debug:
        msg: "Adding cluster members [{{ _mongodb_add_members | join(',') }}]"

    - name: Detect stale cluster hosts
      ansible.builtin.set_fact:
        _mongodb_delete_members: "{{ _delete_members }}"
      vars:
        _target_members: "{{ mongodb_replicaset_members }}"
        _target_hosts: "{{ _target_members | map('nephelaiio.plugins.split_with', ':') | map('first') }}"
        _target_inventory: "{{ _target_hosts | select('in', hostvars.values()) }}"
        _target_inventory_addrs: "{{ _target_inventory | map('extract', hostvars, _addr_attrs) }}"
        _target_host_addrs: "{{ _target_hosts | ansible.utils.ipaddr }}"
        _target_addrs: "{{ _target_inventory_addrs + _target_host_addrs }}"
        _target_iphosts: "{{ _target_addrs | map('nephelaiio.plugins.map_format', '%s:' + mongodb_port) }}"
        _target_revaddrs: "{{ _target_addrs | select('in', _revvars) }}"
        _target_revnames: "{{ _target_revaddrs | map('extract', _revvars, 'inventory_hostname') }}"
        _target_revhosts: "{{ _target_revnames | map('nephelaiio.plugins.map_format', '%s:' + mongodb_port) }}"
        _target_hostaddrs: "{{ _target_members + _target_iphosts + _target_revhosts }}"
        _delete_members: "{{ _existing_members | reject('in', _target_hostaddrs) }}"

    - name: Debug stale cluster members
      ansible.builtin.debug:
        msg: "Removing cluster members [{{ _mongodb_delete_members | join(',') }}]"

    - name: Initialize MongoDB replicaset
      when:
        - _existing_members | length == 0
        - mongodb_replicaset_init
      block:
        - name: Create MongoDB replica set
          community.mongodb.mongodb_replicaset:
            replica_set: "{{ mongodb_replicaset_name }}"
            members: "{{ mongodb_replicaset_members }}"
            validate: false

        - name: Wait for replica set to stabilize
          community.mongodb.mongodb_status:
            replica_set: "{{ mongodb_replicaset_name }}"
            validate: minimal
            poll: 5
            interval: 10
          retries: "{{ mongodb_converge_retries }}"
          delay: "{{ mongodb_converge_delay }}"
          register: mongodb_rs
          until: mongodb_rs is success

    - name: Manage MongoDB replicaset members
      when:
        - _existing_members | length > 0
        - mongodb_replicaset_update
      block:
        - name: Gather replica set primary member
          community.mongodb.mongodb_shell:
            eval: "rs.isMaster().secondary"
          retries: "{{ mongodb_query_retries }}"
          delay: "{{ mongodb_query_delay }}"
          register: mongodb_rs
          until: mongodb_rs is success
          changed_when: false

        - name: Determine MongoDB replicaset primary
          ansible.builtin.set_fact:
            replicaset_primary: "{{ ansible_fqdn if not _replicaset_role }}"
          vars:
            _replicaset_role: "{{ mongodb_rs.transformed_output | list | first | bool }}"

        - name: Add new MongoDB replicaset members
          ansible.builtin.include_tasks: "reconfig.yml"
          loop: "{{ _mongodb_add_members }}"
          loop_control:
            loop_var: _mongodb_member
          vars:
            _format_existing: '{"host": "%s"}'
            _new_member:
              host: "{{ _mongodb_member }}"
              hidden: true
              votes: 0
              priority: 0
            _existing: "{{ _existing_members | map('nephelaiio.plugins.map_format', _format_existing) | map('from_json') }}"
            _members_update: "{{ _existing + [_new_member] }}"
            _add_member: true
          when: replicaset_primary

        - name: Remove MongoDB replicaset members
          ansible.builtin.include_tasks: "reconfig.yml"
          loop: "{{ _mongodb_delete_members }}"
          loop_control:
            loop_var: _mongodb_member
          vars:
            _members_update: "{{ _existing_members | reject('equalto', _mongodb_member) }}"
            _add_member: false
          when: replicaset_primary

        - name: Wait for replica set to stabilize
          community.mongodb.mongodb_status:
            replica_set: "{{ mongodb_replicaset_name }}"
            validate: minimal
            poll: "{{ mongodb_reconfig_poll }}"
            interval: "{{ mongodb_reconfig_interval }}"
          retries: "{{ mongodb_converge_retries }}"
          delay: "{{ mongodb_converge_delay }}"
          register: mongodb_status
          until: mongodb_status is success
          delegate_to: "{{ replicaset_primary }}"
          when: replicaset_primary

    - name: Allow read operations on secondary replicaset members
      community.mongodb.mongodb_shell:
        eval: "rs.secondaryOk()"
      changed_when: false
