---
- name: Manage replicaset
  tags: replicaset
  when: mongodb_replicaset_name | default('') != ''
  block:
    - name: Set replicaset group facts
      ansible.builtin.set_fact:
        _mongodb_replicaset_group: "_mongodb_replica_{{ mongodb_replicaset_name }}_{{ _group_suffix }}"
      vars:
        _group_suffix: "{{ lookup('community.general.random_string', length=12, upper=false, special=false) | first }}"

    - name: Create replicaset member group
      ansible.builtin.add_host:
        name: "{{ inventory_hostname }}"
        groups: "{{ _mongodb_replicaset_group }}"

    - name: Query MongoDB replicaset members
      community.mongodb.mongodb_shell:
        eval: "rs.status().members"
        mongo_cmd: "{{ mongodb_shell | default(omit) }}"
      retries: "{{ mongodb_query_retries }}"
      delay: "{{ mongodb_query_delay }}"
      register: mongodb_status
      until: mongodb_status is succeeded
      ignore_errors: true
      changed_when: false
      run_once: true

    - name: Set MongoDB member facts
      ansible.builtin.set_fact:
        _existing_members: "{{ [] if mongodb_status is failed else _member_names }}"
      vars:
        _member_list: "{{ mongodb_status.transformed_output | list }}"
        _member_names: "{{ _member_list | map(attribute='name') }}"

    - name: Debug target members
      ansible.builtin.debug:
        msg: "Target members are [{{ mongodb_replicaset_members | join(',') }}]"

    - name: Debug cluster facts
      ansible.builtin.debug:
        msg: "Detected cluster members [{{ _existing_members | join(',') }}]"

    - name: Build address fact dictionary
      ansible.builtin.set_fact:
        _revaddrs: "{{ _host_addrs | zip(_hosts) | community.general.dict }}"
        _fwdaddrs: "{{ _hosts | zip(_host_addrs) | community.general.dict }}"
        _map_format: 'nephelaiio.plugins.map_format'
        _split_with: 'nephelaiio.plugins.split_with'
      vars:
        _hosts: "{{ groups[_mongodb_replicaset_group] }}"
        _host_addrs: "{{ _hosts | map('extract', hostvars, ['ansible_default_ipv4', 'address']) }}"

    - name: Detect new cluster members
      ansible.builtin.set_fact:
        _mongodb_add_members: "{{ _add_members }}"
      vars:
        _existing_hosts: "{{ _existing_members | map(_split_with, ':') | map('first') }}"
        _existing_inventory: "{{ _existing_hosts | select('in', _fwdaddrs) }}"
        _existing_inventory_addrs: "{{ _existing_inventory | map('extract', _fwdaddrs) }}"
        _existing_host_addrs: "{{ _existing_hosts | ansible.utils.ipaddr }}"
        _existing_addrs: "{{ _existing_inventory_addrs + _existing_host_addrs }}"
        _existing_iphosts: "{{ _existing_addrs | map(_map_format, '%s:' + mongodb_port) }}"
        _existing_revaddrs: "{{ _existing_addrs | select('in', _revaddrs) }}"
        _existing_revnames: "{{ _existing_revaddrs | map('extract', _revaddrs) }}"
        _existing_revhosts: "{{ _existing_revnames | map(_map_format, '%s:' + mongodb_port) }}"
        _existing_hostaddrs: "{{ _existing_members + _existing_iphosts + _existing_revhosts }}"
        _add_members: "{{ mongodb_replicaset_members | reject('in', _existing_hostaddrs) }}"

    - name: Debug new cluster members
      ansible.builtin.debug:
        msg: "Adding cluster members [{{ _mongodb_add_members | join(',') }}]"

    - name: Detect stale cluster hosts
      ansible.builtin.set_fact:
        _mongodb_delete_members: "{{ _delete_members }}"
      vars:
        _target_members: "{{ mongodb_replicaset_members }}"
        _target_hosts: "{{ _target_members | map(_split_with, ':') | map('first') }}"
        _target_inventory: "{{ _target_hosts | select('in', _fwdaddrs) }}"
        _target_inventory_addrs: "{{ _target_inventory | map('extract', _fwdaddrs) }}"
        _target_host_addrs: "{{ _target_hosts | ansible.utils.ipaddr }}"
        _target_addrs: "{{ _target_inventory_addrs + _target_host_addrs }}"
        _target_iphosts: "{{ _target_addrs | map(_map_format, '%s:' + mongodb_port) }}"
        _target_revaddrs: "{{ _target_addrs | select('in', _revaddrs) }}"
        _target_revnames: "{{ _target_revaddrs | map('extract', _revaddrs) }}"
        _target_revhosts: "{{ _target_revnames | map(_map_format, '%s:' + mongodb_port) }}"
        _target_hostaddrs: "{{ _target_members + _target_iphosts + _target_revhosts }}"
        _delete_members: "{{ _existing_members | reject('in', _target_hostaddrs) }}"

    - name: Debug stale cluster members
      ansible.builtin.debug:
        msg: "Removing cluster members [{{ _mongodb_delete_members | join(',') }}]"

    - name: Set cluster init state
      ansible.builtin.set_fact:
        _replicaset_initialized: "{{ _all_members | flatten | length > 0 }}"
      vars:
        _all_members: "{{ groups[_mongodb_replicaset_group] | map('extract', hostvars, '_existing_members') }}"

    - name: Initialize MongoDB replicaset
      run_once: true
      when:
        - not _replicaset_initialized
        - mongodb_replicaset_init
      block:
        - name: Create MongoDB replicaset
          community.mongodb.mongodb_replicaset:
            replica_set: "{{ mongodb_replicaset_name }}"
            members: "{{ mongodb_replicaset_members }}"
            validate: false

        - name: Wait for replicaset to stabilize
          community.mongodb.mongodb_status:
            replica_set: "{{ mongodb_replicaset_name }}"
            validate: minimal
            poll: 5
            interval: 10
          retries: "{{ mongodb_converge_retries }}"
          delay: "{{ mongodb_converge_delay }}"
          register: mongodb_rs
          until: mongodb_rs is succeeded

    - name: Query replicaset membership
      community.mongodb.mongodb_shell:
        eval: "rs.isMaster().ismaster"
      retries: "{{ mongodb_query_retries }}"
      delay: "{{ mongodb_query_delay }}"
      register: mongodb_rs
      until: mongodb_rs is succeeded
      changed_when: false

    - name: Set replicaset primary facts
      ansible.builtin.set_fact:
        replicaset_primary: "{{ mongodb_rs.transformed_output | list | first | bool }}"

    - name: Manage MongoDB replicaset members
      when:
        - _replicaset_initialized
        - (_mongodb_add_members + _mongodb_delete_members) | length > 0
        - replicaset_primary | bool
        - mongodb_replicaset_update | bool
      block:
        - name: Add new MongoDB replicaset members
          ansible.builtin.include_tasks: "reconfigure.yml"
          vars:
            _add_member: true
          loop: "{{ _mongodb_add_members }}"

        - name: Remove stale MongoDB replicaset members
          ansible.builtin.include_tasks: "reconfigure.yml"
          vars:
            _add_member: false
          loop: "{{ _mongodb_delete_members }}"

    - name: Allow read operations on secondary replicaset members
      community.mongodb.mongodb_shell:
        eval: "rs.secondaryOk()"
      changed_when: false
      run_once: true
      when: replicaset_primary
