---
- name: Manage MongoDB existing member hosts
  ansible.builtin.set_fact:
    _mongodb_existing_host: "{{ true if _existing_host_filter else false }}"
    _mongodb_add_members: "{{ _add_members_list }}"
    _mongodb_delete_members: "{{ _delete_members_list }}"
  vars:
    _existing_list: "{{ _existing_members | default([]) }}"
    _existing_hosts: "{{ _existing_list | map('nephelaiio.plugins.split_with', ':') | map('first') }}"
    _existing_host_filter: "{{ _existing_hosts | select('equalto', ansible_default_ipv4.address) }}"
    _add_members_list: "{{ mongodb_replicaset_members | reject('in', _existing_list) }}"
    _delete_members_list: "{{ _existing_list | reject('in', mongodb_replicaset_members) }}"

- name: Initialize MongoDB replicaset
  when: not _mongodb_existing_host
  run_once: true
  block:

    - name: Create MongoDB replica set
      community.mongodb.mongodb_replicaset:
        replica_set: "{{ mongodb_replicaset_name }}"
        members: "{{ mongodb_replicaset_members }}"
        validate: false

    - name: Wait for replica set to stabilize
      community.mongodb.mongodb_status:
        replica_set: "{{ mongodb_replicaset_name }}"
        validate: minimal
        poll: 5
        interval: 10
      retries: 3
      delay: 60
      register: mongodb_rs
      until: mongodb_rs is success

- name: Manage MongoDB replicaset members
  when: _mongodb_existing_host
  block:

    - name: Gather replica set primary member
      community.mongodb.mongodb_shell:
        eval: "rs.isMaster().secondary"
      retries: 3
      delay: 60
      register: mongodb_rs
      until: mongodb_rs is success
      changed_when: false

    - name: Determine MongoDB replicaset primary
      ansible.builtin.set_fact:
        replicaset_primary: "{{ ansible_fqdn if not _replicaset_role }}"
      vars:
        _replicaset_role: "{{ mongodb_rs.transformed_output | list | first | bool }}"

    - name: Add new MongoDB replicaset members
      ansible.builtin.include_tasks: "reconfig.yml"
      loop: "{{ _mongodb_add_members }}"
      loop_control:
        loop_var: _mongodb_member
      vars:
        _format_existing: '{"host": "%s"}'
        _new_member:
          host: "{{ _mongodb_member }}"
          hidden: true
          votes: 0
          priority: 0
        _existing: "{{ _existing_members | map('nephelaiio.plugins.map_format', _format_existing) | map('from_json') }}"
        _members_update: "{{ _existing + [_new_member] }}"
        _add_member: true
      when: replicaset_primary

    - name: Remove MongoDB replicaset members
      ansible.builtin.include_tasks: "reconfig.yml"
      loop: "{{ _mongodb_delete_members }}"
      loop_control:
        loop_var: _mongodb_member
      vars:
        _members_update: "{{ _existing_members | reject('equalto', _mongodb_member) }}"
        _add_member: false
      when: replicaset_primary

    - name: Wait for replica set to stabilize
      community.mongodb.mongodb_status:
        replica_set: "{{ mongodb_replicaset_name }}"
        validate: minimal
        poll: "{{ mongodb_reconfig_poll }}"
        interval: "{{ mongodb_reconfig_interval }}"
      delegate_to: "{{ replicaset_primary }}"
      when: replicaset_primary

- name: Set slave ok for replica set
  community.mongodb.mongodb_shell:
    eval: "rs.secondaryOk()"
  changed_when: false
  run_once: true
