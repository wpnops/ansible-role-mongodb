---
- name: Verify MongoDB prerequesites
  tags: always
  block:

    - name: Set variable overrides
      ansible.builtin.set_fact:
        _mongodb_packages: "{{ mongodb_packages | default(mongodb_packages_default | sorted_get(overrides)) }}"
        _mongodb_user: "{{ mongodb_user | default(mongodb_user_default | sorted_get(overrides)) }}"
        _mongodb_group: "{{ mongodb_group | default(mongodb_group_default | sorted_get(overrides)) }}"
        _mongodb_storage_dbpath: "{{ mongodb_storage_dbpath | default(mongodb_storage_dbpath_default | sorted_get(overrides)) }}"
        _mongodb_log_path: "{{ mongodb_log_path | default(mongodb_log_path_default | sorted_get(overrides)) }}"
      vars:
        overrides:
          - "{{ ansible_distribution | lower }}-{{ ansible_distribution_release | lower }}"
          - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}"
          - "{{ ansible_distribution | lower }}"
          - "{{ ansible_os_family | lower }}"
          - "default"

    - name: Verify MongoDB packages
      ansible.builtin.fail:
        msg: _mongodb_packages must be set and not empty
      when: _mongodb_packages | default([]) | length == 0

    - name: Verify MongoDB pip packages
      ansible.builtin.fail:
        msg: mongodb_pip_packages must be set and not empty
      when: mongodb_pip_packages | default([]) | length == 0

    - name: Verify MongoDB release
      ansible.builtin.fail:
        msg: mongodb_release must be set
      when: not mongodb_release

    - name: Verify MongoDB sharding role
      ansible.builtin.fail:
        msg: "mongodb_sharding_roles must be one of [{{ _roles | join(', ') }}], got '{{ _role }}''"
      vars:
        _role: "{{ mongodb_sharding_role }}"
        _roles: ['configsvr', 'shardsvr']
      when:
        - _role != ''
        - _role not in _roles

    - name: Stat MongoDB configuration file
      ansible.builtin.stat:
        path: "{{ mongodb_config_path }}"
      register: _mongodb_config_file

    - name: Verify MongoDB configuration
      when: _mongodb_config_file.stat.exists
      block:

        - name: Slurp MongoDB configuration
          ansible.builtin.slurp:
            path: "{{ mongodb_config_path }}"
          register: _mongodb_config_data

        - name: Decode MongoDB configuration
          ansible.builtin.set_fact:
            _mongodb_config: "{{ _mongodb_config_data['content'] | b64decode | from_yaml }}"

        - name: Verify sharding configuration
          ansible.builtin.fail:
            msg: "unsupported sharding cluster role change to '{{ mongodb_sharding_role }}'"
          vars:
            _sharding: "sharding"
            _role: "clusterRole"
          when:
            - _sharding in _mongodb_config
            - _role in _mongodb_config[_sharding]
            - _mongodb_config[_sharding][_role] != mongodb_sharding_role

- name: Deploy mongodb
  tags: install
  block:

    - name: Install MongoDB pip packages
      ansible.builtin.pip:
        name: "{{ mongodb_pip_packages }}"
      register: pip_res
      retries: 5
      delay: 5
      until: pip_res is success

    - name: Install MongoDB pre-requisites for debian
      ansible.builtin.apt:
        name:
          - gpg-agent
          - gnupg
        update_cache: true
      when: ansible_os_family | lower == "debian"
      register: apt_res
      retries: 5
      delay: 5
      until: apt_res is success

    - name: Install MongoDB pre-requisites for redhat
      ansible.builtin.yum:
        name:
          - gnupg2
        update_cache: true
      when: ansible_os_family | lower == "redhat"
      register: yum_res
      retries: 5
      delay: 5
      until: yum_res is success

    - name: Install MongoDB packages
      when: "'mongodb-org' in _mongodb_packages"
      block:

        - name: Install MongoDB in redhat
          when: ansible_os_family | lower == "redhat"
          block:

            - name: Clean yum repository
              ansible.builtin.file:
                state: absent
                path: /etc/yum.repos.d/mongodb.repo
              changed_when: false

            - name: Install MongoDB yum key
              ansible.builtin.yum_repository:
                name: mongodb
                description: MongoDB Repository
                baseurl: "{{ _mongodb_baseurl }}/{{ mongodb_release }}/{{ ansible_architecture }}/"
                enabled: true
                gpgcheck: true
                gpgkey: "https://www.mongodb.org/static/pgp/server-{{ mongodb_release }}.asc"
              vars:
                _mongodb_baseurl: "https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org"
              changed_when: false

            - name: Update yum cache
              ansible.builtin.yum:
                update_cache: true
              register: yum_res
              retries: 5
              delay: 5
              until: yum_res is success

        - name: Install MongoDB in debian
          when: ansible_os_family | lower == "debian"
          block:

            - name: Install MongoDB apt key
              ansible.builtin.apt_key:
                url: "https://pgp.mongodb.com/server-{{ mongodb_release }}.asc"

            - name: Clean apt repository
              ansible.builtin.file:
                state: absent
                path: /etc/apt/sources.list.d/mongodb.list
              changed_when: false

            - name: Add apt repository
              ansible.builtin.apt_repository:
                filename: mongodb
                repo: "{{ _repo }}"
              vars:
                _is_debian: "{{ (ansible_distribution | lower) == 'debian' }}"
                _distribution: "{{ ansible_distribution | lower }}"
                _os_release: "{{ ansible_distribution_release }}"
                _repo_mongodb: "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt"
                _repo_ubuntu_url: "{{ _repo_mongodb }}/{{ _distribution }} {{ _os_release }}"
                _repo_ubuntu_name: "{{ 'main' if _is_debian else 'multiverse' }}"
                _repo: "{{ _repo_ubuntu_url }}/mongodb-org/{{ mongodb_release }} {{ _repo_ubuntu_name }}"
              changed_when: false

            - name: Update apt repos
              ansible.builtin.apt:
                update_cache: true
              changed_when: false
              register: apt_res
              retries: 5
              delay: 5
              until: apt_res is success

    - name: Install MongoDB packages
      ansible.builtin.package:
        name: "{{ _mongodb_packages }}"
      register: package_res
      retries: 5
      delay: 5
      until: package_res is success

    - name: Configure mongodb
      tags: configure
      block:

        - name: Configure mongodb
          ansible.builtin.template:
            src: mongodb.conf.j2
            dest: "{{ mongodb_config_path }}"
            owner: "{{ _mongodb_user }}"
            group: "{{ _mongodb_group }}"
          notify: Restart mongodb

        - name: Gather service facts
          ansible.builtin.service_facts:

        - name: Manage firewall
          when: ('ufw' in services) or ('ufw.service' in services)
          block:

            - name: Configure ufw access rules
              when: mongodb_firewall_state != "stopped"
              block:

                - name: Configure ssh firewall access
                  community.general.ufw:
                    state: enabled
                    from: any
                    port: '22'
                    proto: tcp
                    rule: allow

                - name: Configure snmp firewall access
                  community.general.ufw:
                    state: enabled
                    from: any
                    port: '161'
                    proto: any
                    rule: allow

                - name: Compute mongodb address block
                  ansible.builtin.set_fact:
                    _mongodb_addresses_list: "{{ _addr_list + [_default_address] | list | unique }}"
                  vars:
                    _addr_list: "{{ mongodb_src_addresses_list }}"
                    _network: "{{ ansible_default_ipv4.network }}"
                    _prefix: "{{ ansible_default_ipv4.prefix }}"
                    _default_address: "{{ _network }}/{{ _prefix }}"

                - name: Configure mongodb firewall access
                  community.general.ufw:
                    state: enabled
                    from: "{{ item }}"
                    port: "27017:27020"
                    proto: tcp
                    rule: allow
                  loop: "{{ _mongodb_addresses_list }}"

                - name: Manage ufw service
                  ansible.builtin.service:
                    name: "ufw.service"
                    state: "{{ mongodb_firewall_state }}"
                    enabled: true

            - name: Disable ufw service
              when: mongodb_firewall_state == "stopped"
              block:

                - name: Query ufw status
                  ansible.builtin.command: ufw status
                  changed_when: false
                  register: _ufw_status

                - name: Disable ufw
                  ansible.builtin.command: ufw disable
                  when: _ufw_status.stdout is not match("Status[:] inactive")
                  tags: skip_ansible_lint

                - name: Stop ufw service
                  ansible.builtin.service:
                    name: "ufw.service"
                    state: stopped
                    enabled: false

    - name: Manage MongoDB services
      tags: always
      block:

        - name: Manage MongoDB service
          ansible.builtin.service:
            name: "{{ mongodb_service }}"
            state: started
            enabled: true

        - name: Flush handlers
          ansible.builtin.meta: flush_handlers

        - name: Wait for MongoDB to be up
          community.mongodb.mongodb_shell:
            eval: "db.runCommand({ping: 1})"
          changed_when: false
          register: mongodb_status
          retries: 6
          delay: 10
          until: mongodb_status is success

    - name: Manage MongoDB replicaset
      tags:
        - configure
        - replicaset
      when:
        - mongodb_replicaset_name | default('') != ''
        - mongodb_replicaset_members | default([]) | length > 2
      block:

        - name: Verify MongoDB replicaset member count
          ansible.builtin.fail:
            msg: "mongodb_release must be set to one of [{{ _memeber_counts | join(', ') }}] }}]"
          vars:
            _member_count: "{{ mongodb_replicaset_members | length }}"
            _member_counts: [3, 5, 7]
          when: _members_count not in _member_counts

        - name: Create MongoDB replica set
          community.mongodb.mongodb_replicaset:
            replica_set: "{{ mongodb_replicaset_name }}"
            members: "{{ mongodb_replicaset_members }}"
            validate: false
          run_once: true

        - name: Retrieve mongodb replicaset status
          community.mongodb.mongodb_status:
            replica_set: "{{ mongodb_replicaset_name }}"
            validate: minimal
            poll: 5
            interval: 10
          register: mongodb_rs
          run_once: true

        - name: Determine MongoDB replicaset primary
          ansible.builtin.set_fact:
            replicaset_primary: "{{ ansible_hostname if _replicaset_primary == ansible_host }}"
          vars:
            _mongodb_replicaset: "{{ mongodb_rs.replicaset | dict2items }}"
            _replicaset_primary_filter: "{{ _mongodb_replicaset | selectattr('value', 'equalto', 'PRIMARY') }}"
            _replicaset_primary_keys: "{{ _replicaset_primary_filter | map(attribute='key') }}"
            _replicaset_primary_list: "{{ _replicaset_primary_keys | map('split_with', ':') | map('first') }}"
            _replicaset_primary: "{{ _replicaset_primary_list | flatten | first }}"

        - name: Reconfigure MongoDB replica set
          community.mongodb.mongodb_replicaset:
            replica_set: "{{ mongodb_replicaset_name }}"
            members: "{{ mongodb_replicaset_members }}"
            reconfigure: true
            validate: false
          when: not replicaset_primary

        - name: Set slave ok for replica set
          community.mongodb.mongodb_shell:
            eval: "rs.secondaryOk()"
          changed_when: false
          run_once: true
