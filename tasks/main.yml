---
- name: verify mongodb prerequesites
  tags: always
  block:

    - name: verify mongodb packages
      ansible.builtin.meta: end_play
      when: mongodb_packages | default([]) | length == 0

    - name: verify mongodb pip packages
      ansible.builtin.meta: end_play
      when: mongodb_pip_packages | default([]) | length == 0

    - name: verify mongodb release
      ansible.builtin.meta: end_play
      when: not mongodb_release

    - name: install mongodb pip packages
      ansible.builtin.pip:
        name: "{{ mongodb_pip_packages }}"

    - name: install mongodb pre-requisites for debian
      ansible.builtin.apt:
        name:
          - gpg-agent
          - gnupg
      when: ansible_os_family | lower == "debian"

    - name: install mongodb pre-requisites for redhat
      ansible.builtin.yum:
        name:
          - gnupg2
      when: ansible_os_family | lower == "redhat"

- name: manage mongodb
  tags: install
  block:

    - name: install mongodb packages
      when: "'mongodb-org' in mongodb_packages"
      block:

        - name: install mongodb in redhat
          when: ansible_os_family | lower == "redhat"
          block:

            - name: install mongodb yum key
              ansible.builtin.yum_repository:
                name: MongoDB Repository
                description: MongoDB Repository
                baseurl: "https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/{{ mongodb_release }}/{{ ansible_architecture }}/"
                enabled: yes
                gpgcheck: yes
                gpgkey: "https://www.mongodb.org/static/pgp/server-{{ mongodb_release }}.asc"

        - name: install mongodb in debian
          when: ansible_os_family | lower == "debian"
          block:

            - name: install mongodb apt key
              ansible.builtin.apt_key:
                url: "https://pgp.mongodb.com/server-{{ mongodb_release }}.asc"

            - name: clean apt repository
              ansible.builtin.file:
                state: absent
                path: /etc/apt/sources.list.d/mongodb.list
              changed_when: false

            - name: add apt repository
              ansible.builtin.apt_repository:
                filename: mongodb
                repo: "{{ _mongodb_repo }}"
              vars:
                _mongodb_package_repo: "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt"
                _mongodb_ubuntu_repo: "{{ _mongodb_package_repo }}/{{ ansible_distribution | lower }} {{ ansible_distribution_release }}"
                _mongodb_repo: "{{ _mongodb_ubuntu_repo }}/mongodb-org/{{ mongodb_release }} multiverse"
              changed_when: false

            - name: update apt repos
              ansible.builtin.apt:
                update_cache: yes

    - name: install mongodb packages
      ansible.builtin.package:
        name: "{{ mongodb_packages }}"

    - name: configure mongodb
      tags: configure
      block:

        - name: configure mongodb
          ansible.builtin.template:
            src: mongodb.conf.j2
            dest: "{{ mongodb_config_path }}"
            owner: "{{ mongodb_user }}"
            group: "{{ mongodb_group }}"
          notify: restart mongodb

        - name: gather service facts
          ansible.builtin.service_facts:

        - name: manage firewall
          when: "'ufw' in services"
          block:

            - name: configure ssh firewall access
              community.general.ufw:
                state: enabled
                from: any
                port: '22'
                proto: tcp
                rule: allow

            - name: configure snmp firewall access
              community.general.ufw:
                state: enabled
                from: any
                port: '161'
                proto: any
                rule: allow

            - name: configure mongodb firewall access
              community.general.ufw:
                state: enabled
                from: "{{ _address_block }}"
                port: "27017:27020"
                proto: tcp
                rule: allow
              vars:
                _network: "{{ ansible_default_ipv4.network }}"
                _prefix: "{{ ansible_default_ipv4.prefix }}"
                _address_block: "{{ _network }}/{{ _prefix }}"

        - name: manage mongodb service
          ansible.builtin.service:
            name: "{{ mongodb_service }}"
            state: started
            enabled: yes

    - name: flush handlers
      ansible.builtin.meta: flush_handlers
      tags: always

    - name: manage mongodb replicaset
      tags:
        - configure
        - replicaset
      when:
        - mongodb_replicaset_name | default('') != ''
        - mongodb_replicaset_members | default([]) | length > 2
      block:

        - name: create mongodb replica set
          community.mongodb.mongodb_replicaset:
            replica_set: "{{ mongodb_replicaset_name }}"
            members: "{{ mongodb_replicaset_members }}"
            validate: no
          run_once: yes

        - name: retrieve mongodb replicaset status
          community.mongodb.mongodb_status:
            replica_set: "{{ mongodb_replicaset_name }}"
            validate: minimal
            poll: 5
            interval: 10
          register: mongodb_rs
          run_once: yes

        - name: determine mongodb replicaset primary
          ansible.builtin.set_fact:
            replicaset_primary: "{{ ansible_hostname if _replicaset_primary == ansible_host }}"
          vars:
            _mongodb_replicaset: "{{ mongodb_rs.replicaset | dict2items }}"
            _replicaset_primary_dict: "{{ _mongodb_replicaset | selectattr('value', 'equalto', 'PRIMARY') }}"
            _replicaset_primary_list: "{{ _replicaset_primary_dict | map(attribute='key') | map('split_with', ':') | map('first') }}"
            _replicaset_primary: "{{ _replicaset_primary_list | flatten | first }}"

        - name: reconfigure mongodb replica set
          community.mongodb.mongodb_replicaset:
            replica_set: "{{ mongodb_replicaset_name }}"
            members: "{{ mongodb_replicaset_members }}"
            reconfigure: yes
            validate: no
          when: not replicaset_primary

        - name: set slave ok for replica set
          ansible.builtin.command: mongosh --eval "rs.secondaryOk()"
          changed_when: false
          run_once: yes
