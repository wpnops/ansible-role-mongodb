---
- name: verify mongodb prerequesites
  tags: always
  block:

    - name: set variable overrides
      ansible.builtin.set_fact:
        _mongodb_packages: "{{ mongodb_packages | default(mongodb_packages_default | sorted_get(overrides)) }}"
        _mongodb_user: "{{ mongodb_user | default(mongodb_user_default | sorted_get(overrides)) }}"
        _mongodb_group: "{{ mongodb_group | default(mongodb_group_default | sorted_get(overrides)) }}"
        _mongodb_storage_dbpath: "{{ mongodb_storage_dbpath | default(mongodb_storage_dbpath_default | sorted_get(overrides)) }}"
        _mongodb_log_path: "{{ mongodb_log_path | default(mongodb_log_path_default | sorted_get(overrides)) }}"
      vars:
        overrides:
          - "{{ ansible_distribution | lower }}-{{ ansible_distribution_release | lower }}"
          - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}"
          - "{{ ansible_distribution | lower }}"
          - "{{ ansible_os_family | lower }}"
          - "default"

    - name: verify mongodb packages
      ansible.builtin.meta: end_play
      when: _mongodb_packages | default([]) | length == 0

    - name: verify mongodb pip packages
      ansible.builtin.meta: end_play
      when: mongodb_pip_packages | default([]) | length == 0

    - name: verify mongodb release
      ansible.builtin.meta: end_play
      when: not mongodb_release

    - name: stat mongodb configuration
      ansible.builtin.stat:
        path: "{{ mongodb_config_path }}"
      register: mongodb_config_stat

    - name: debug var
      debug:
        var: mongodb_config_stat

    - name: install mongodb pip packages
      ansible.builtin.pip:
        name: "{{ mongodb_pip_packages }}"
      register: pip_res
      retries: 5
      delay: 5
      until: pip_res is success

    - name: install mongodb pre-requisites for debian
      ansible.builtin.apt:
        name:
          - gpg-agent
          - gnupg
        update_cache: true
      when: ansible_os_family | lower == "debian"
      register: apt_res
      retries: 5
      delay: 5
      until: apt_res is success

    - name: install mongodb pre-requisites for redhat
      ansible.builtin.yum:
        name:
          - gnupg2
        update_cache: true
      when: ansible_os_family | lower == "redhat"
      register: yum_res
      retries: 5
      delay: 5
      until: yum_res is success

- name: manage mongodb
  tags: install
  block:

    - name: install mongodb packages
      when: "'mongodb-org' in _mongodb_packages"
      block:

        - name: install mongodb in redhat
          when: ansible_os_family | lower == "redhat"
          block:

            - name: clean yum repository
              ansible.builtin.file:
                state: absent
                path: /etc/yum.repos.d/mongodb.repo
              changed_when: false

            - name: install mongodb yum key
              ansible.builtin.yum_repository:
                name: mongodb
                description: MongoDB Repository
                baseurl: "{{ _mongodb_baseurl }}/{{ mongodb_release }}/{{ ansible_architecture }}/"
                enabled: true
                gpgcheck: true
                gpgkey: "https://www.mongodb.org/static/pgp/server-{{ mongodb_release }}.asc"
              vars:
                _mongodb_baseurl: "https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org"
              changed_when: false

            - name: update yum cache
              ansible.builtin.yum:
                update_cache: true
              register: yum_res
              retries: 5
              delay: 5
              until: yum_res is success

        - name: install mongodb in debian
          when: ansible_os_family | lower == "debian"
          block:

            - name: install mongodb apt key
              ansible.builtin.apt_key:
                url: "https://pgp.mongodb.com/server-{{ mongodb_release }}.asc"

            - name: clean apt repository
              ansible.builtin.file:
                state: absent
                path: /etc/apt/sources.list.d/mongodb.list
              changed_when: false

            - name: add apt repository
              ansible.builtin.apt_repository:
                filename: mongodb
                repo: "{{ _repo }}"
              vars:
                _is_debian: "{{ (ansible_distribution | lower) == 'debian' }}"
                _distribution: "{{ ansible_distribution | lower }}"
                _os_release: "{{ ansible_distribution_release }}"
                _repo_mongodb: "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt"
                _repo_ubuntu_url: "{{ _repo_mongodb }}/{{ _distribution }} {{ _os_release }}"
                _repo_ubuntu_name: "{{ 'main' if _is_debian else 'multiverse' }}"
                _repo: "{{ _repo_ubuntu_url }}/mongodb-org/{{ mongodb_release }} {{ _repo_ubuntu_name }}"
              changed_when: false

            - name: update apt repos
              ansible.builtin.apt:
                update_cache: true
              register: apt_res
              retries: 5
              delay: 5
              until: apt_res is success

    - name: install mongodb packages
      ansible.builtin.package:
        name: "{{ _mongodb_packages }}"
      register: package_res
      retries: 5
      delay: 5
      until: package_res is success

    - name: configure mongodb
      tags: configure
      block:

        - name: configure mongodb
          ansible.builtin.template:
            src: mongodb.conf.j2
            dest: "{{ mongodb_config_path }}"
            owner: "{{ _mongodb_user }}"
            group: "{{ _mongodb_group }}"
          notify: restart mongodb

        - name: gather service facts
          ansible.builtin.service_facts:

        - name: manage firewall
          when: ('ufw' in services) or ('ufw.service' in services)
          block:

            - name: configure ufw access rules
              when: mongodb_firewall_state != "stopped"
              block:

                - name: configure ssh firewall access
                  community.general.ufw:
                    state: enabled
                    from: any
                    port: '22'
                    proto: tcp
                    rule: allow

                - name: configure snmp firewall access
                  community.general.ufw:
                    state: enabled
                    from: any
                    port: '161'
                    proto: any
                    rule: allow

                - name: compute mongodb address block
                  ansible.builtin.set_fact:
                    _mongodb_addresses_list: "{{ _addr_list + [_default_address] | list | unique }}"
                  vars:
                    _addr_list: "{{ mongodb_src_addresses_list }}"
                    _network: "{{ ansible_default_ipv4.network }}"
                    _prefix: "{{ ansible_default_ipv4.prefix }}"
                    _default_address: "{{ _network }}/{{ _prefix }}"

                - name: configure mongodb firewall access
                  community.general.ufw:
                    state: enabled
                    from: "{{ item }}"
                    port: "27017:27020"
                    proto: tcp
                    rule: allow
                  loop: "{{ _mongodb_addresses_list }}"

                - name: manage ufw service
                  ansible.builtin.service:
                    name: "ufw.service"
                    state: "{{ mongodb_firewall_state }}"
                    enabled: true

            - name: disable ufw service
              when: mongodb_firewall_state == "stopped"
              block:

                - name: query ufw status
                  ansible.builtin.command: ufw status
                  changed_when: false
                  register: _ufw_status
                  tags:
                    - skip_ansible_lint

                - name: disable ufw
                  ansible.builtin.command: ufw disable
                  when: _ufw_status.stdout is not match("Status[:] inactive")

                - name: stop ufw service
                  ansible.builtin.service:
                    name: "ufw.service"
                    state: stopped
                    enabled: false

    - name: manage mongodb services
      tags: always
      block:

        - name: manage mongodb service
          ansible.builtin.service:
            name: "{{ mongodb_service }}"
            state: started
            enabled: true

        - name: flush handlers
          ansible.builtin.meta: flush_handlers

        - name: wait for mongodb to be up
          community.mongodb.mongodb_shell:
            eval: "db.runCommand({ping: 1})"
          changed_when: false
          register: mongodb_status
          retries: 6
          delay: 10
          until: mongodb_status is success

    - name: manage mongodb replicaset
      tags:
        - configure
        - replicaset
      when:
        - mongodb_replicaset_name | default('') != ''
        - mongodb_replicaset_members | default([]) | length > 2
      block:

        - name: create mongodb replica set
          community.mongodb.mongodb_replicaset:
            replica_set: "{{ mongodb_replicaset_name }}"
            members: "{{ mongodb_replicaset_members }}"
            validate: false
          run_once: true

        - name: retrieve mongodb replicaset status
          community.mongodb.mongodb_status:
            replica_set: "{{ mongodb_replicaset_name }}"
            validate: minimal
            poll: 5
            interval: 10
          register: mongodb_rs
          run_once: true

        - name: determine mongodb replicaset primary
          ansible.builtin.set_fact:
            replicaset_primary: "{{ ansible_hostname if _replicaset_primary == ansible_host }}"
          vars:
            _mongodb_replicaset: "{{ mongodb_rs.replicaset | dict2items }}"
            _replicaset_primary_filter: "{{ _mongodb_replicaset | selectattr('value', 'equalto', 'PRIMARY') }}"
            _replicaset_primary_keys: "{{ _replicaset_primary_filter | map(attribute='key') }}"
            _replicaset_primary_list: "{{ _replicaset_primary_keys | map('split_with', ':') | map('first') }}"
            _replicaset_primary: "{{ _replicaset_primary_list | flatten | first }}"

        - name: reconfigure mongodb replica set
          community.mongodb.mongodb_replicaset:
            replica_set: "{{ mongodb_replicaset_name }}"
            members: "{{ mongodb_replicaset_members }}"
            reconfigure: true
            validate: false
          when: not replicaset_primary

        - name: set slave ok for replica set
          community.mongodb.mongodb_shell:
            eval: "rs.secondaryOk()"
          changed_when: false
          run_once: true
