---
- name: Verify MongoDB prerequesites
  tags: always
  block:

    - name: Set variable overrides
      ansible.builtin.set_fact:
        _mongodb_packages: "{{ mongodb_packages }}"
        _mongodb_user: "{{ mongodb_user | default(_user_default) }}"
        _mongodb_group: "{{ mongodb_group | default(_group_default) }}"
        _mongodb_storage_dbpath: "{{ mongodb_storage_dbpath | default(_storage_default) }}"
        _mongodb_log_path: "{{ mongodb_log_path | default(_log_default) }}"
      vars:
        _user_default: "{{ mongodb_user_default | nephelaiio.plugins.sorted_get(overrides) }}"
        _group_default: "{{ mongodb_group_default | nephelaiio.plugins.sorted_get(overrides) }}"
        _storage_default: "{{ mongodb_storage_dbpath_default | nephelaiio.plugins.sorted_get(overrides) }}"
        _log_default: "{{ mongodb_log_path_default | nephelaiio.plugins.sorted_get(overrides) }}"
        overrides:
          - "{{ ansible_distribution | lower }}-{{ ansible_distribution_release | lower }}"
          - "{{ ansible_distribution | lower }}-{{ ansible_distribution_major_version }}"
          - "{{ ansible_distribution | lower }}"
          - "{{ ansible_os_family | lower }}"
          - "default"

    - name: Verify MongoDB packages
      ansible.builtin.fail:
        msg: _mongodb_packages must be set and not empty
      when: _mongodb_packages | default([]) | length == 0

    - name: Verify MongoDB pip packages
      ansible.builtin.fail:
        msg: mongodb_pip_packages must be set and not empty
      when: mongodb_pip_packages | default([]) | length == 0

    - name: Verify MongoDB sharding role
      ansible.builtin.fail:
        msg: "mongodb_sharding_roles must be one of [{{ _roles | join(', ') }}], got '{{ _role }}''"
      vars:
        _role: "{{ mongodb_sharding_role }}"
        _roles: ['configsvr', 'shardsvr']
      when:
        - _role != ''
        - _role not in _roles

    - name: Verify MongoDB replicaset member count
      ansible.builtin.fail:
        msg: "replicaset size must be one of [{{ _member_counts | join(', ') }}], got '{{ _member_count }}'"
      vars:
        _member_count: "{{ mongodb_replicaset_members | length }}"
        _member_counts: ['3', '5', '7']
      when:
        - mongodb_replicaset_name | default('') != ''
        - _member_count not in _member_counts

    - name: Stat MongoDB configuration file
      ansible.builtin.stat:
        path: "{{ mongodb_config_path }}"
      register: _mongodb_config_file

    - name: Verify MongoDB configuration
      when: _mongodb_config_file.stat.exists
      block:

        - name: Slurp MongoDB configuration
          ansible.builtin.slurp:
            path: "{{ mongodb_config_path }}"
          register: _mongodb_config_data

        - name: Decode MongoDB configuration
          ansible.builtin.set_fact:
            _mongodb_config: "{{ _mongodb_config_data['content'] | b64decode | from_yaml }}"

        - name: Verify sharding configuration
          ansible.builtin.fail:
            msg: "unsupported sharding cluster role change to '{{ mongodb_sharding_role }}'"
          vars:
            _sharding: "sharding"
            _role: "clusterRole"
          when:
            - _sharding in _mongodb_config
            - _role in _mongodb_config[_sharding]
            - _mongodb_config[_sharding][_role] != mongodb_sharding_role

        - name: Retrieve MongoDB existing replicaset members
          when: mongodb_replicaset_name | default('') != ''
          block:

            - name: Gather MongoDB existing replica set members
              community.mongodb.mongodb_shell:
                eval: "rs.status().members"
                mongo_cmd: "{{ mongodb_shell | default(omit) }}"
              changed_when: false
              retries: 6
              delay: 10
              run_once: true
              register: mongodb_status

            - name: Compute MongoDB existing replica set members
              ansible.builtin.set_fact:
                _existing_members: "{{ _members_list | map(attribute='name') }}"
              vars:
                _members_list: "{{ mongodb_status.transformed_output | list }}"

- name: Release package holds
  ansible.builtin.include_tasks: lock.yml
  vars:
    _lock_state: hold

- name: Install packages and configure package holds
  block:
    - name: Install MongoDB packages
      ansible.builtin.package:
        name: "{{ _mongodb_packages }}"
      register: package_res
      until: package_res is success

  always:
    - name: Configure package holds
      ansible.builtin.include_tasks: lock.yml
      vars:
        _lock_state: install

- name: Configure mongodb
  tags: configure
  block:

    - name: Configure mongodb
      ansible.builtin.template:
        src: mongodb.conf.j2
        dest: "{{ mongodb_config_path }}"
        owner: "{{ _mongodb_user }}"
        group: "{{ _mongodb_group }}"
        mode: 0644
      notify: Restart MongoDB
      register: config_manage

    - name: Gather service facts
      ansible.builtin.service_facts:

    - name: Manage firewall
      when: ('ufw' in services) or ('ufw.service' in services)
      block:

        - name: Configure ufw access rules
          when: mongodb_firewall_state != "stopped"
          block:

            - name: Configure ssh firewall access
              community.general.ufw:
                state: enabled
                from: any
                port: '22'
                proto: tcp
                rule: allow

            - name: Configure snmp firewall access
              community.general.ufw:
                state: enabled
                from: any
                port: '161'
                proto: any
                rule: allow

            - name: Compute mongodb address block
              ansible.builtin.set_fact:
                _mongodb_addresses_list: "{{ _addr_list + [_default_address] | list | unique }}"
              vars:
                _addr_list: "{{ mongodb_src_addresses_list }}"
                _network: "{{ ansible_default_ipv4.network }}"
                _prefix: "{{ ansible_default_ipv4.prefix }}"
                _default_address: "{{ _network }}/{{ _prefix }}"

            - name: Configure mongodb firewall access
              community.general.ufw:
                state: enabled
                from: "{{ item }}"
                port: "27017:27020"
                proto: tcp
                rule: allow
              loop: "{{ _mongodb_addresses_list }}"

            - name: Manage ufw service
              ansible.builtin.service:
                name: "ufw.service"
                state: "{{ mongodb_firewall_state }}"
                enabled: true

        - name: Disable ufw service
          when: mongodb_firewall_state == "stopped"
          block:

            - name: Query ufw status
              ansible.builtin.command: ufw status
              changed_when: false
              register: _ufw_status

            - name: Disable ufw
              ansible.builtin.command: ufw disable
              when: _ufw_status.stdout is not match("Status[:] inactive")
              tags: skip_ansible_lint

            - name: Stop ufw service
              ansible.builtin.service:
                name: "ufw.service"
                state: stopped
                enabled: false

- name: Include service tasks
  ansible.builtin.include_tasks: service.yml
